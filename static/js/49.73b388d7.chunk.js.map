{"version":3,"file":"static/js/49.73b388d7.chunk.js","mappings":"6SAAMA,EAAU,mCACVC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACqBC,MAAM,GAAD,OAC1BF,EAD0B,oCACUD,IAEtCI,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MATzB,cACCG,EADD,yBAUEA,GAVF,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACsBX,MAAM,GAAD,OAC3BF,EAD2B,iBACVa,EADU,oBACSd,EADT,oBAG7BI,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MATzB,cACCM,EADD,yBAUEA,GAVF,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BF,GAA3B,uFACoBX,MAAM,GAAD,OACzBF,EADyB,iBACRa,EADQ,4BACmBd,EADnB,oBAG3BI,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MATzB,cACCQ,EADD,yBAUEA,GAVF,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BJ,GAA5B,uFACiBX,MAAM,GAAD,OACtBF,EADsB,iBACLa,EADK,4BACsBd,EADtB,2BAGxBI,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MATzB,cACCU,EADD,yBAUEA,GAVF,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAoCC,GAApC,uFACgBlB,MAAM,GAAD,OACrBF,EADqB,gCACWD,EADX,iCAC2CqB,EAD3C,gCAGvBjB,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MATzB,cACCa,EADD,yBAWEA,GAXF,oE,iDChCP,UArBgB,WACd,OAA6BC,EAAAA,EAAAA,WAArBJ,EAAR,EAAQA,QAASK,EAAjB,EAAiBA,QAEjB,OACE,2BACGA,IAAW,qCACZ,wBACGL,GAAsC,IAA3BA,EAAQM,QAAQC,OAC1BP,EAAQM,QAAQE,KAAI,SAAAC,GAAM,OACxB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOC,YAMlB,2E,oLCMV,UAnBwB,WACtB,IAAQf,GAAYiB,EAAAA,EAAAA,MAAZjB,QACR,GAA8BkB,EAAAA,EAAAA,UAAS,MAAvC,eAAOb,EAAP,KAAgBc,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOR,EAAP,KAAgBU,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,GAEX,IAAME,EAAY,mCAAG,+FACNlB,EAAAA,EAAAA,IAAaJ,GACvBV,KAAK6B,GACLI,SAAQ,kBAAMH,GAAW,MAHT,mFAAH,qDAKlBE,MACC,CAACtB,IAEG,CAAEK,QAAAA,EAASK,QAAAA","sources":["services/fetches.js","views/Reviews/Reviews.js","views/Reviews/useFetchReviews.js"],"sourcesContent":["const API_KEY = 'b5cd3fae011a36a857068d95d756f08e';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendCollection() {\n  const trendMovies = await fetch(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .catch(error => console.log(error));\n  return trendMovies;\n}\n\nexport async function movieDetails(movieId) {\n  const oneMovieInfo = await fetch(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .catch(error => console.log(error));\n  return oneMovieInfo;\n}\n\nexport async function movieActors(movieId) {\n  const actorsInfo = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .catch(error => console.log(error));\n  return actorsInfo;\n}\n\nexport async function movieReviews(movieId) {\n  const reviews = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .catch(error => console.log(error));\n  return reviews;\n}\n\nexport async function fetchMoviesByKeyWord(value) {\n  const movies = await fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${value}&page=1&include_adult=false`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .catch(error => console.log(error));\n\n  return movies;\n}\n","import useFetchReviews from './useFetchReviews';\n\nconst Reviews = () => {\n  const { reviews, loading } = useFetchReviews();\n\n  return (\n    <div>\n      {loading && <h2>Loading</h2>}\n      <ul>\n        {reviews && reviews.results.length !== 0 ? (\n          reviews.results.map(review => (\n            <li key={review.author}>\n              <h5>Author: {review.author}</h5>\n              <p>{review.content}</p>\n            </li>\n          ))\n        ) : (\n          <p>We don't have any reviews for this movie</p>\n        )}\n      </ul>\n    </div>\n  );\n};\nexport default Reviews;\n","import { movieReviews } from '../../services/fetches';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst useFetchReviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchReviews = async () => {\n      return await movieReviews(movieId)\n        .then(setReviews)\n        .finally(() => setLoading(false));\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return { reviews, loading };\n};\n\nexport default useFetchReviews;\n"],"names":["API_KEY","BASE_URL","fetchTrendCollection","fetch","then","response","ok","json","catch","error","console","log","trendMovies","movieDetails","movieId","oneMovieInfo","movieActors","actorsInfo","movieReviews","reviews","fetchMoviesByKeyWord","value","movies","useFetchReviews","loading","results","length","map","review","author","content","useParams","useState","setReviews","setLoading","useEffect","fetchReviews","finally"],"sourceRoot":""}